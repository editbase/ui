---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';

// ssr import of components (so that ssr framework can load them)
import '@editbase/components';
import '@editbase/themes/gadigal';

interface Props {
	title: string;
	description: string;
	image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);


const { title, description, image = '/blog-placeholder-1.jpg' } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/inter-variable.woff2" as="font" type="font/woff2" crossorigin />
<link href="https://cdn.jsdelivr.net/npm/remixicon@4.1.0/fonts/remixicon.css" rel="stylesheet">

<!-- HTMX -->
<script src="https://unpkg.com/htmx.org@2.0.2"></script>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Client-side imports (hydration) -->
<script>
	import '@editbase/components';
</script>

<!-- HTMX Links -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  function updateActiveLinks() {
    const currentUrl = window.location.pathname;
    const links = document.querySelectorAll('a');

    links.forEach(link => {
      const linkUrl = new URL(link.href, window.location.origin).pathname;

      // Check for exact match
      const isExact = currentUrl === linkUrl;

      // Check if the link URL matches the current URL or is a sub-path
      let isActive = isExact || currentUrl.startsWith(linkUrl + '/');

      // If there are multiple sub-paths, only mark the most specific one as active
      if (!isExact) {
        const subPaths = currentUrl.split('/').slice(1);
        const linkPaths = linkUrl.split('/').slice(1);

        let maxMatch = 0;
        for (let i = 0; i < subPaths.length; i++) {
          if (subPaths[i] === linkPaths[i]) {
            maxMatch++;
          } else {
            break;
          }
        }

        isActive = maxMatch === linkPaths.length;
      }

      link.setAttribute('data-exact', isExact.toString());
      link.setAttribute('data-active', isActive.toString());
    });
  }

  // Initial update
  updateActiveLinks();

  // Listen for htmx:afterOnLoad events
  document.body.addEventListener('htmx:afterOnLoad', updateActiveLinks);
});
</script>